using System.Numerics;
using DZ_7;
/*
Создать проект калькулятора комплексных чисел (достаточно сделать сложение, умножение и деление).
Применить при создании программы архитектурные паттерны, добавить логирование калькулятора.
Соблюдать принципы SOLID, паттерны проектирования.
Можно выбрать другой язык программирования, например C# или Python.
Доп. задания
- новый метод get_history() в класс CalculatorModel, который возвращает список операций, сохраненных в истории. 
Представление (CalculatorView) теперь также имеет метод display_history(), который отображает историю ввода.
- добавить две новые функции в модель (square_root - вычисление квадратного корня и power - возведение в степень). 
Представление (CalculatorView) теперь запрашивает второе число, если оператор является sqrt или pow. 
Презентер (CalculatorPresenter) обрабатывает эти новые операции и вызывает соответствующие методы модели.
*/


// Применение принципа единственной ответственности (Single responsibility principle) и паттерна проектирования MVP (Model-View-Presenter).
// Инкапуслируем логику в отдельные классы, для удобства тестирования и уменьшения зоны ответственности основных частей калькулятора.
var view = new CalculatorView();
var model = new CalculatorModel();
var presenter = new CalculatorPresenter(model, view);
Logger logger = new Logger();
presenter.Notify += logger.Log;
presenter.Run();
